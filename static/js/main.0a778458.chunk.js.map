{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","username","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAceA,EAbJ,SAAC,GACX,IADYC,EACb,EADaA,KAAMC,EACnB,EADmBA,MAAUC,GAC7B,EAD0BC,GAC1B,EAD6BD,UAG5B,OACC,yBAAKE,UAAU,oDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCaQM,EApBA,SAAC,GACf,IADgBC,EACjB,EADiBA,OAEhB,OAEG,6BAEEA,EAAOC,IAAI,SAACC,EAAKC,GAEhB,OAAO,kBAAC,EAAD,CACPC,IAAKJ,EAAOG,GAAGT,SACdC,GAAIK,EAAOG,GAAGR,GACdH,KAAMQ,EAAOG,GAAGX,KAChBC,MAAOO,EAAOG,GAAGV,MAChBC,SAAUM,EAAOG,GAAGT,aATzB,MCSWW,EAdE,SAAC,GAClB,EADmBC,YAClB,IAD+BC,EAChC,EADgCA,aAE/B,OACC,yBAAKX,UAAU,OACf,2BACAA,UAAU,mCACTY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAEI,EARF,SAACC,GAGd,OADAC,QAAQC,IAAIF,GAEX,yBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAClEN,EAAMO,WCqCOC,G,kBAnCd,aAAc,IAAD,8BACZ,+CAWDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACjB,YAAagB,EAAME,OAAOC,SAXzC,EAAKC,MAAM,CACV1B,OAAQ,GACRM,YAAa,IAJF,E,iFAOO,IAAD,OAClBqB,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,MAAE,CAAC,EAAKR,SAAS,CAACvB,OAAO+B,S,+BAOpC,IAAD,SAC6BC,KAAKN,MAA1B1B,EADR,EACQA,OACDiC,GAFP,EACgB3B,YACMN,EAAOkC,OAAO,SAAAC,GAClC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAS,EAAKX,MAAMpB,YAAY8B,kBAEjE,OAAQpC,EAAOsC,OAEf,yBAAK1C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcyB,KAAKX,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUrB,OAAUiC,MALlB,2C,GAzBcM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MACbC,SAASC,eAAe,SDuHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,gB","file":"static/js/main.0a778458.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=({name, email, id,username})=>\r\n{\r\n\t\r\n\treturn(\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='robots' src={`https://robohash.org/${username}?200x200`} />\r\n\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst Cardlist=({robots})=>\r\n{\r\n\treturn (\r\n\t\t\t\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trobots.map((user,i) => \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn <Card \r\n\t\t\t\t\t\t\tkey={robots[i].username}\r\n\t\t\t\t\t\t\t id={robots[i].id} \r\n\t\t\t\t\t\t\t name={robots[i].name} \r\n\t\t\t\t\t\t\t email={robots[i].email}\r\n\t\t\t\t\t\t\t  username={robots[i].username}\r\n\t\t\t\t\t\t\t  />\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t};\r\n\t\t\t\t</div>\r\n\t\t   );\r\n}\r\nexport default Cardlist;","import React from 'react';\r\nconst SearchBox= ({searchfield, searchChange}) =>\r\n{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input\r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t type='search' \r\n\t\t placeholder='search robots'\r\n\t\t onChange={searchChange}\r\n\t\t />\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll=(props)=>\r\n{\r\nconsole.log(props)\r\nreturn(\r\n\t<div style={{overflowY: 'scroll', border:'5px solid black', height:'500px'}}>\r\n\t{props.children}\r\n\t</div>)\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport './App.css'\r\n\r\nclass App extends Component\r\n{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots :[],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(users=>[this.setState({robots:users})]);\r\n\t}\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t\t\r\n\t}\r\n\trender() \r\n\t{\r\n\t\tconst {robots, searchfield}=this.state;\r\n\t\tconst filteredRobots=robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t\treturn(!robots.length)?\r\n\t\t\t <h1>Loading</h1>:\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<Cardlist robots = {filteredRobots} />\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t\r\n\t\t}\r\n\t}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './Containers/App'\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />\n\t, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}